// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * NextAuth default models (supports Google OAuth and other providers)
 */
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]

  // Domain relationships
  bookings      Booking[]
  notifications Notification[]
  payments      Payment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/**
 * We Park domain models
 */
model ParkingSlot {
  id          String  @id @default(cuid())
  name        String
  location    String
  price       Float
  rules       String?
  isAvailable Boolean @default(true)

  bookings Booking[]
}

model Booking {
  id        String   @id @default(cuid())
  userId    String
  slotId    String
  startTime DateTime
  endTime   DateTime
  status    String   @default("pending")

  user    User        @relation(fields: [userId], references: [id])
  slot    ParkingSlot @relation(fields: [slotId], references: [id])
  payment Payment?
}

model Payment {
  id        String @id @default(cuid())
  userId    String
  bookingId String @unique
  amount    Float
  method    String
  status    String @default("pending")

  user    User    @relation(fields: [userId], references: [id])
  booking Booking @relation(fields: [bookingId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  type      String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}
